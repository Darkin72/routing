####################################################
# LSrouter.py
# Name:
# HUID:
#####################################################

from router import Router
from packet import Packet

import json

class LSrouter(Router):
    """Link state routing protocol implementation.

    Add your own class fields and initialization code (e.g. to create forwarding table
    data structures). See the `Router` base class for docstrings of the methods to
    override.
    """

    def __init__(self, addr, heartbeat_time):
        Router.__init__(self, addr)  # Initialize base class - DO NOT REMOVE
        self.heartbeat_time = heartbeat_time
        self.last_time = 0
        # TODO
        self.sequence_number = 0 # so thu tu cho cac LSP cua router nay
        self.link_state = {}
        self.lsdb = {}
        self.lsdb[self.addr] = {'sequence_number': self.sequence_number, 'link_state': self.link_state.copy()}
        self.forwarding_table = {} 
        self.forwarding_table[self.addr] = None # dia chi cua chinh router nay

    def handle_packet(self, port, packet):
        """Process incoming packet."""
        # TODO
        if packet.is_traceroute:
            end_port = packet.dst_addr
            if end_port == self.addr: # neu dich chinh la router nay thi return
                return
            out_port = self.forwarding_table.get(end_port)
            if out_port is not None:
                self.send(out_port, packet)
        else:
            # Hint: this is a routing packet generated by your routing protocol
            src_addr = packet.src_addr
            sequence_number, link_state = json.loads(packet.content)
            # If the sequence number is higher and the received link state is different
            previous_link_state = self.lsdb.get(src_addr, {}).get('link_state', {})
            if previous_link_state is None or sequence_number > self.lsdb[src_addr]['sequence_number']:
                #   update the local copy of the link state
                self.lsdb[src_addr] = {'sequence_number': sequence_number, 'link_state': link_state}
                #   update the forwarding table
                self.compute_forwarding_table()
                #   broadcast the packet to other neighbors
                for p, (nbr, _) in self.link_state.items():
                    if p != port:
                        content_str = json.dumps((sequence_number, link_state))
                        copy_packet = Packet(Packet.ROUTING, self.addr, nbr, content=content_str)
                        self.send(p, copy_packet)

#   phia duoi chua sua
#   neighbors -> link_state
    def handle_new_link(self, port, endpoint, cost):
        """Handle new link."""
        # TODO
        self.neighbors[endpoint] = cost
        self.neighbor_ports[endpoint] = port

        self.sequence_number += 1
        self.lsdb[self.addr] = {'seq': self.sequence_number, 'neighbor': self.neighbors.copy()}
      
        self.compute_forwarding_table()
        self.broadcast_lsp()

    def handle_remove_link(self, port):
        """Handle removed link."""
        removed_neighbor_addr = None

        for nbr, p in self.neighbor_ports.items():
            if p == port:
                removed_neighbor_addr = nbr
                break

        if removed_neighbor_addr is not None:
            del self.neighbor_ports[removed_neighbor_addr]
            del self.neighbors[removed_neighbor_addr]

            self.sequence_number += 1
            self.lsdb[self.addr] = {'seq': self.sequence_number, 'neighbor': self.neighbors.copy()}

            self.compute_forwarding_table()
            self.broadcast_lsp()

    def handle_time(self, time_ms):
        """Handle current time."""
        if time_ms - self.last_time >= self.heartbeat_time:
            self.last_time = time_ms
            # TODO
            self.broadcast_lsp()


    def broadcast_lsp(self):
        pkt_content = {
            'origin': self.addr,
            'seq': self.sequence_number,
            'neighbor': self.neighbors.copy()
        }
        lsp_packet = Packet(Packet.ROUTING, self.addr, None, content=pkt_content)
        for nbr_addr, port in self.neighbor_ports.items():
            self.send(port, lsp_packet.copy())

    #def compute_forwarding_table():

    def __repr__(self):
        """Representation for debugging in the network visualizer."""
        # TODO
        #   NOTE This method is for your own convenience and will not be graded
        return f"LSrouter(addr={self.addr})"
